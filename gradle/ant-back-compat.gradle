//
// Ant-compatibility layer. ALL of sections below should be gone at some point. They are
// here so that we can coexist with current ant build but they are potential problems or
// can be cleaned up by following conventions.
//

// Exclude inner classes from testing.
allprojects {
  tasks.withType(Test) { task ->
    exclude '**/*$*'
  }
}

// Exclude test classes that are not actually stand-alone tests (they're executed from other stuff).
configure(project(":lucene:replicator")) {
  afterEvaluate {
    test {
      exclude "**/SimpleServer*"
    }
  }
}

// Adapt to custom folder convention.
allprojects {
  plugins.withType(JavaPlugin) {
    sourceSets {
      main.java.srcDirs = ['src/java']
      main.resources.srcDirs = ['src/resources']
      test.java.srcDirs = ['src/test']
      test.resources.srcDirs = ['src/test-files']
    }

    task copyTestResources(type: Copy) {
      from('src/test') {
        exclude '**/*.java'
      }
      into sourceSets.test.java.outputDir
    }
    processTestResources.dependsOn copyTestResources
  }
}

// Adapt to custom 'web' folder location.
configure(project(":solr:webapp")) {
  plugins.withType(WarPlugin) {
    webAppDirName = "web"
  }
}

// Stick to previous artifact names (not identical to path/ folders).
configure(subprojects.findAll { it.path.contains(':analysis:') }) {
  plugins.withType(JavaPlugin) {
    afterEvaluate {
      project.archivesBaseName = project.archivesBaseName.replace("-analysis-", "-analyzers-")
    }
  }
}

// For lucene, add a 'resolve' task that copies (non-project) dependencies
// and test dependencies under lib/ folder.
configure(allprojects.findAll {project -> project.path.startsWith(":lucene") }) {
  plugins.withType(JavaPlugin) {
    task resolve(type: Sync) {
      from({
        return configurations.testCompileClasspath.copyRecursive({ dep -> !(dep instanceof org.gradle.api.artifacts.ProjectDependency) })
      })

      into 'lib'
    }
  }
}

// For solr, add a 'resolve' task that copies (non-project) dependencies
// under lib/ and test dependencies under test-lib/ folder.
configure(allprojects.findAll {project -> project.path.startsWith(":solr") }) {
  plugins.withType(JavaPlugin) {
    task resolveTestLib(type: Sync) {
      from({
        def testsWithoutProjectDeps = configurations.testCompileClasspath.copyRecursive({ dep -> !(dep instanceof org.gradle.api.artifacts.ProjectDependency) })
        def onlyTestDeps = testsWithoutProjectDeps - configurations.compileClasspath
        return onlyTestDeps
      })

      into 'test-lib'
    }

    task resolve(type: Sync) {
      dependsOn resolveTestLib

      from({
        return configurations.compileClasspath.copyRecursive({ dep -> !(dep instanceof org.gradle.api.artifacts.ProjectDependency) })
      })

      into 'lib'
    }
  }
}

// Resources from top-level project folder are looked up via getClass(). Strange.
configure(project(":lucene:benchmark")) {
  plugins.withType(JavaPlugin) {
    task syncConf(type: Sync) {
      from('conf')
      into file("${sourceSets.test.java.outputDir}/conf")
    }
    processTestResources.dependsOn syncConf
  }
}

// lucene:replicator has httpclient dependency with transitive commons-logging:1.2 but currently
// requires 1.1.2. This commons-logging should be removed entirely and replaced with slf4j-to-*
// redirector.
configure(project(":lucene:replicator")) {
  plugins.withType(JavaPlugin) {
    configurations.all {
      resolutionStrategy {
        force 'commons-logging:commons-logging:1.1.3'
      }
    }
  }
}

// Set up cross-project dependency on test classes. This should be resolved by pulling reused classes into
// a separate regular module. Exporting test classes is sort of weird.
configure([project(":lucene:spatial3d"),
           project(":lucene:analysis:common"),
           project(":lucene:backward-codecs"),
           project(":lucene:queryparser"),
           project(":solr:contrib:dataimporthandler")]) {
  plugins.withType(JavaPlugin) {
    configurations {
      testClassesExported
    }

    artifacts {
      testClassesExported sourceSets.test.java.outputDir, {
        builtBy testClasses
      }
    }
  }
}

configure(project(":lucene:spatial-extras")) {
  plugins.withType(JavaPlugin) {
    dependencies {
      testImplementation project(path: ':lucene:spatial3d', configuration: 'testClassesExported')
    }
  }
}

configure(project(":solr:core")) {
  plugins.withType(JavaPlugin) {
    dependencies {
      testImplementation project(path: ':lucene:backward-codecs', configuration: 'testClassesExported')
      testImplementation project(path: ':lucene:queryparser', configuration: 'testClassesExported') 
    }
  }
}

configure(project(":solr:contrib:analysis-extras")) {
  plugins.withType(JavaPlugin) {
    dependencies {
      testImplementation project(path: ':lucene:analysis:common', configuration: 'testClassesExported')
      testImplementation project(path: ':solr:contrib:dataimporthandler', configuration: 'testClassesExported')
    }
  }
}

configure(project(":solr:contrib:dataimporthandler-extras")) {
  plugins.withType(JavaPlugin) {
    dependencies {
      testImplementation project(path: ':solr:contrib:dataimporthandler', configuration: 'testClassesExported')
    }
  }
}

